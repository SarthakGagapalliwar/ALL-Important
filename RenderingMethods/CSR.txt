CSR = Client-Side Rendering
The server sends a basic HTML file with an empty <div id="root"></div>.
JavaScript (React, Angular, Vue, etc.) runs in the browser, fetches data,
and builds the page on the client side.
All rendering happens in the browser after the initial load.

✅ Pros of CSR
2.Rich & interactive UIs:
Perfect for Single Page Applications (SPAs).
Smooth user experience after first load.

2.Faster navigation after first load:
Once the app is loaded, moving between pages feels instant (no full page reloads).

3.Less server load:
Server mainly sends static files (HTML, JS, CSS).
Rendering is offloaded to the client’s device.

4.Great for dynamic apps:
Apps like dashboards, chats, or social networks benefit from frequent UI updates without reloading.



❌ Cons of CSR
1.Slower first load (poor Time-to-First-Byte):
User first gets an empty page → must download JS → run JS → fetch data → then render.
This delay is called the “white screen problem”.

2.Bad for SEO (without SSR/Pre-rendering):
Search engine bots may struggle with JS-heavy pages.
Content is not immediately visible in raw HTML.

3.Large JavaScript bundles:
Heavy initial download can hurt performance, especially on slow networks or devices.

4.Browser dependency:
Relies heavily on the client’s CPU & memory.
Old or low-power devices can lag.

5.Security considerations:
Since more logic happens on the client side, sensitive logic must be carefully handled (never trust client data).

TL;DR:
CSR = Browser does the work.
✅ Best for highly interactive SPAs.
❌ Not great for SEO or first load performance.