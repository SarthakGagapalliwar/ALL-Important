SSR = Server-Side Rendering
üëâ In web development, Server-Side Rendering (SSR) means that the HTML 
for a webpage is generated on the server and then sent to the browser.

So instead of sending a mostly empty HTML file and letting JavaScript build the page (like in CSR: Client-Side Rendering), 
the server prepares the full HTML with content, and the browser just displays it.

üîë Key Points:
How it works:
User requests a page ‚Üí Server runs code (often with frameworks like Next.js, Nuxt, etc.) ‚Üí Server returns a fully rendered HTML page.
Faster first load: Because the browser immediately receives HTML with data.
Better SEO: Search engines can easily index SSR pages since the content is ready in the HTML.
More server load: Each request requires computation on the server.


CSR (React SPA):
Browser first loads index.html with an empty <div id="root"></div>.
React fetches data and renders content using JavaScript.
User sees a blank page until JS finishes.

SSR (Next.js page):
Browser requests page.
Server fetches data, builds HTML (e.g., <h1>Hello Sarthak</h1>).
Browser instantly shows full page.


‚ùå Cons of SSR

1. Higher server load:
Every request must be rendered on the server.
If you have heavy traffic, servers can become overloaded compared to CSR or static pages.

2.Slower navigation after first load (without caching):
First page load is fast, but if you navigate between pages, each page needs a new server 
request unless you implement hydration or caching.

3.Server dependency:
If the server goes down, nothing works.
With static sites, users might still see cached content via CDNs.

4.Caching challenges:
With CSR, the browser caches JS easily.
With SSR, caching rendered HTML for each user (especially if data is personalized) is harder.

5.SEO quirks with JavaScript-heavy apps:
While SSR improves SEO, if not implemented properly (e.g., slow rendering, hydration issues),
search engines might still face difficulties.

‚ö° In short:
SSR is great for SEO and fast first load,
but not always good for highly dynamic apps or when scalability and performance under load are critical.


//to solve this problem then SPA comes single page application
